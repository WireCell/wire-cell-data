#+TITLE: Wire Cell Toolkit Configuration Data

* Overview

This area holds "configuration data" for WCT.  Confusingly, this is
distinct from but similar to WCT software configuration (see
[[https://github.com/wirecell/wire-cell-cfg][wire-cell-cfg]] package) as much of if is in the same JSON format as
configuration.  This is also not "data" in the sense of what WCT
simulation, signal processing or reconstruction produces.

Rather, "configuration data" is large, "bulk" input information which
WCT needs to do its job but which is too voluminous for humans to type
out.  Rather, these configuration data files are generated with some
external mechanism and then converted to ready-to-consume JSON by code
in [[https://github.com/wire-cell/wire-cell-python][wire-cell-python]]).

* Using this data

To use this data simply clone this repository into a directory and
place that directory in your =WIRECELL_PATH=.  The history of this
repository is not particularly useful so to save time and disk space a
shallow clone is enough:


#+BEGIN_EXAMPLE
  $ git clone --depth 1 https://github.com/WireCell/wire-cell-data.git
  $ export WIRECELL_PATH=$(pwd)/wire-cell-data
#+END_EXAMPLE

* Tour of data files

All WCT configuration data files are in JSON format and optionally
compressed with BZip2.  The files are described here broken into
various categories of purpose.  Be wary that the descriptions that
follow may not be comprehensive nor up to date.  Also, only WCT
configuration data files are committed to the repository.  The
"upstream" files are named below and may be available [[http://www.phy.bnl.gov/~bviren/tmp/wctsim/wct-dev/share/wirecell/data/][here]].  There are
also some diagnostic plots related to these files [[http://www.phy.bnl.gov/~bviren/tmp/wctsim/wct-dev/share/wirecell/plots/][here]].


** Wires

Wires (wire segments) in WCT are described by their physical endpoints
and their logical locations in terms of various numbers and indices.
A "WCT wire file" provides an exhaustive list of this info for each
wire.  Note, WCT can generate wire files in a parameterized way given
basic information about an anode plane.  See 

#+BEGIN_EXAMPLE
  $ wirecell-util make-wires --help
#+END_EXAMPLE

However, some wires are taken from other programs and then converted
to WCT wire files.  See

#+BEGIN_EXAMPLE
  $ wirecell-util convert-oneside-wires --help
#+END_EXAMPLE

- ~ChannelWireGeometry_v2.txt~ a dump of MB wires from larsoft in so called "celltree wire format"
- [[./microboone-celltree-wires-v2.json.bz2]] the conversion of the above
- [[./microboone-celltree-wires-v2.1.json.bz2]] the conversion of the above, fixing wire index in plane

See [[http://www.phy.bnl.gov/~bviren/tmp/wctsim/wct-dev/share/wirecell/plots/microboone-celltree-wires-v2.1.pdf][this plot]] for graphical representation of these wires.  (Note, a transform may be applied to their locations in WCT, so don't take the positions shown here as gospel.)


- ~WireGeometry_dune35t_v5_tpc1.txt~ "celltree wire format" for DUNE 35t prototype
- [[./dune35t-tpc1-celltree-wires-v5.json.bz2]] WCT wire file from above

- [[./pdsp-wires.json.bz2]] protoDUNE single-phase wires for one APA, generated by =make-wires=

- LArSoft wire definition dump for protoDUNE-SP.  [[./protodune-wires-larsoft-v4.json.bz2]].  v4 fixed an ordering problem, (see [[https://github.com/WireCell/wire-cell-data/issues/2][this issue]]).  See [[https://www.phy.bnl.gov/~bviren/tmp/protodune-wires-larsoft-v4.pdf][this PDF]] with a graphical dump of this file.  Reproduce with

#+BEGIN_EXAMPLE
$ wirecell-util plot-wires protodune-wires-larsoft-v4.json.bz2 protodune-wires-larsoft-v4.pdf
#+END_EXAMPLE

** Field Response

The field responses are generally calculated by Garfield (so called "truth responses" may be from some other source).  The data produced by Garfield are in the form of a family of files named by their impact position and plane letter.  Each file spans that impact position relative to many wires.
To process this data into "WCT field response files" see:

#+BEGIN_EXAMPLE
  $ wirecell-sigproc convert-garfield --help
#+END_EXAMPLE

The required "origin" and "speed" are not recorded in the files
directly and must be provided on the command line of this converter.
Note the converter takes as input a =.tar.gz= of the Garfield
directory of =<impact>_<letter>.dat= files (and no other files).

- ~dune_4.71.tar.gz~ DUNE APA Garfield data
- [[./garfield-1d-3planes-21wires-6impacts-dune-v1.json.bz2]] WCT field response file from above.
- [[./garfield-1d-boundary-path-rev-dune.json.bz2]] slight tweak in Garfield running to avoid overpopulating saddle points.
- [[./garfield-11impacts-dune.json.bz2]] fine-grained field response with 11 impact positions instead of 6.
- [[./garfield-1d-boundary-path-rev-dune-no-grid.json.bz2]] field response without grid plane.
- [[./dune_nogrid_0d8x.json.bz2]] field response without grid plane and the bias voltage is reduced by 20 precent.
- [[./garfield-1d-boundary-path-rev-dune-ALL-COLLECTION.json.bz2]] replace field response of two induction plane with the collection one. It is used for simulation so that one can easily figure out the signal region in the induction plane.

MB has many sets of field response files.  The nominal set is called
=ub_10= (uboone wire model with fields starting at 10cm from the
wires).

- ~ub_10.tar.gz~ nominal MB Garfield data 
- [[./ub-10.json.bz2]] WCT field response conversion

Alternatives in two dimensions have been created in order to
understand the MB shorted wires and a Garfield normalization issue.
The shorted wire alternatives have labels

- =uv-ground= :: the U and V wires are shorted
- =vy-ground= :: the V and Y wires are shorted

The normalization issue is that early Garfield runs seem to produce
collection responses which when integrated gives a total charge of
about 2.04 electrons instead of the expected 1.0.  Initially the
responses were normalized such that the average collection wire
integral was 1.0.  This technique utterly fails for shorted wires
where "collection" becomes ill defined.  The variants are labeled as:

- =wnormed= :: normalize by the average collection (W wire) integral method
- =absolute= :: take Garfield normalization as-is
- =half= :: simply scale by 0.5

These are the files:

- [[./ub-10-absolute.json.bz2]]
- [[./ub-10-half.json.bz2]]
- [[./ub-10-wnormed.json.bz2]]
- [[./ub-10-uv-ground-absolute.json.bz2]]
- [[./ub-10-uv-ground-half.json.bz2]]
- [[./ub-10-uv-ground-wnormed.json.bz2]]
- [[./ub-10-vy-ground-absolute.json.bz2]]
- [[./ub-10-vy-ground-half.json.bz2]]
- [[./ub-10-vy-ground-wnormed.json.bz2]]

** Zeroed

An "almost 1D" FR can be generated from a full 2D FR with:

#+begin_example
$ wirecell-sigproc frzero -n 0 \
    -o dune-garfield-1d565-wires0.json.bz2  \
    dune-garfield-1d565.json.bz2
#+end_example

This example is provided.  This retains the fine-binned responses but
just for impact positions in the 0-wire region.  ~-n 1~ would also
include response for charge above the +/- 1 wire region, etc.

** PCBro

The [[https://github.com/brettviren/pcbro][PCBro]] package provides WCT wires and fields files for "strips plus
holes" detectors (50-L, eventual DUNE SP VD FD module).  Files here
are still be a work in progress.  Check the above GitHub project for
some known issues. 

The available PCBro files are named as:

#+begin_example
[wires|fields]-<views>-<hole>-<angle>.json.bz2
#+end_example

- first is literal ~wires~ or ~fields~ giving file type
- ~<views>~ is 2 or 3
- ~<hole>~ is hole diameter written, eg ~h2mm5~ for 2.5 mm.
- ~<angle>~ is characteristic angle of an indication plane

Currently there are 2 2-view corresponding to the initial 50-L R&D
detector at CERN and 2 3-views corresponding to the desired hexagonal
pattern DUNE SP VD FD.  A 3-view "diagonal 48 deg" induction to match
the latest 50-L R&D detector is not yet available.

** Noise

The WCT simulation can produce proper intrinsic noise waveforms based
on a measured noise amplitude distribution expressed in frequency
domain.  These are provided as simple text files which are then
converted to "WCT noise files".  For info on this conversion see

#+BEGIN_EXAMPLE
  $ wirecell-sigproc convert-noise-spectra --help
#+END_EXAMPLE

As the procedures are improved the =vN= version label is increased.

- [[./microboone-noise-spectra-v1.json.bz2]]
- [[./microboone-noise-spectra-v2.json.bz2]]

** Shorted wires

- ~MicroBooNE_ShortedWireList.xlsx~ spreadsheet of MB shorted wires from Brooke.
- [[./microboone-shorted-wires.json.bz2]] a "WCT shorted wire file" distilled from that.

See [[http://www.phy.bnl.gov/~bviren/tmp/wctsim/wct-dev/share/wirecell/plots/microboone-shorted-wires.pdf][this set of plots]] showing wires listed in the full spreadsheet.  The distilled file holds just wire regions that are shorted, listed by their plane number and the wire numbers bounding wires that are shorted.

** Deposition

Note, strictly, these types of files should *not* be included here and
may be removed in the future.  The current WCT drift and detector
response simulation relies on an external interaction/tracking
simulation (ie, Geant4 based) to provide initial distribution of
energy depositions or of ionization electrons.  A couple samples of
these are provided.

- [[./g4tuple-qsn-v1-fixed.json.bz2]]
- [[./g4tuple-qsn-v2-fixed.json.bz2]]


